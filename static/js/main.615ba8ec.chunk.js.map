{"version":3,"sources":["GeoChallenge.js","serviceWorker.js","index.js"],"names":["ProgressBar","props","widthPercent","currentQuestion","className","style","height","role","width","aria-valuenow","aria-valuemin","aria-valuemax","Flag","clicked","currentStatus","toString","onClick","imageUrl","src","alt","title","Header","score","Turn","answer","country","name","toUpperCase","flags","map","flag","i","key","selected","onAnswerSelected","statusDetermine","Continue","resetEverything","Results","GeoChallenge","questionNum","turnData","Boolean","window","location","hostname","match","countries","getTurnData","allCountriesFlags","reduce","acc","x","concat","fourRandomFlags","shuffle","slice","sample","find","state","progress","correct","playagain","isCorrect","setTimeout","render","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAIA,SAASA,EAAYC,GACnB,IAAIC,GAAiBD,EAAME,gBAAkB,GAAK,EAAK,IACvD,OACE,yBAAKC,UAAU,uBAAuBC,MAAO,CAAEC,OAAQ,SACrD,yBACEF,UAAU,eACVG,KAAK,cACLF,MAAO,CAAEG,MAAON,EAAe,KAC/BO,gBAAeR,EAAMC,aACrBQ,gBAAe,EACfC,gBAAe,KAEdT,EAAe,EAAIA,EAAe,IAAM,KAKjD,SAASU,EAAKX,GACZ,OACE,yBAAKG,UAAW,kBACd,yBACEA,UAAS,wBACPH,EAAMY,QAAUZ,EAAMa,cAAcC,WAAa,IAEnDC,QAAS,WACPf,EAAMe,QAAQf,EAAMgB,YAGtB,6BACE,yBACEC,IAAKjB,EAAMgB,SACXE,IAAKlB,EAAMmB,MACXA,MAAOnB,EAAMmB,MACbhB,UAAW,iBAOvB,SAASiB,EAAOpB,GACd,OACE,yBAAKG,UAAU,kBACb,wBAAIA,UAAU,eAAd,YACYH,EAAME,gBAAkB,EAAI,IAAMF,EAAME,gBAClD,qCAEF,wBAAIC,UAAU,eAAd,UACUH,EAAMqB,MACd,uCAKR,SAASC,EAAKtB,GACZ,IAAMuB,EAASvB,EAAMwB,QAAQR,SAC7B,OACE,oCACE,wBAAIb,UAAW,+BACZH,EAAMwB,QAAQC,KAAKC,eAEtB,yBAAKvB,UAAU,aACb,yBAAKA,UAAU,OACZH,EAAM2B,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACf,kBAACnB,EAAD,CACEK,SAAUa,EACVV,MAAOW,EACPC,IAAKD,EACLE,SAAUhC,EAAMgC,SAChBpB,QAASZ,EAAMY,QACfG,QAASf,EAAMiC,iBACfpB,cAAeb,EAAMkC,gBAAgBL,EAAMN,WAQzD,SAASY,EAASnC,GAChB,OACE,yBAAKG,UAAU,0BACb,4BACEY,QAAS,WACPf,EAAMoC,gBAAgB,QAF1B,eAUN,IAAMC,EAAU,SAACrC,GACf,OACE,wBAAIG,UAAU,eAAd,kBACiB,0BAAMA,UAAU,UAAUH,EAAMqB,SA2BtCiB,MAvBf,SAAsBtC,GACpB,OACE,yBAAKG,UAAU,aACb,kBAACJ,EAAD,CAAaG,gBAAiBF,EAAMuC,cACpC,kBAACnB,EAAD,CAAQC,MAAOrB,EAAMqB,MAAOnB,gBAAiBF,EAAMuC,cAClDvC,EAAMuC,YAAc,EACnB,kBAACjB,EAAD,iBACMtB,EAAMwC,SADZ,CAEER,SAAUhC,EAAMgC,SAChBpB,QAASZ,EAAMY,QACfqB,iBAAkBjC,EAAMiC,iBACxBC,gBAAiBlC,EAAMkC,mBAGzB,oCACE,kBAAC,EAAD,CAASb,MAAOrB,EAAMqB,QACtB,kBAACc,EAAD,CAAUC,gBAAiBpC,EAAMoC,qBC3GvBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCXAC,EAAY,CAAC,CACXrB,KAAM,YACNT,SAAU,8BAEd,CACIS,KAAM,SACNT,SAAU,2BAEd,CACIS,KAAM,WACNT,SAAU,6BAEd,CACIS,KAAM,SACNT,SAAU,2BAEd,CACIS,KAAM,WACNT,SAAU,6BAEd,CACIS,KAAM,QACNT,SAAU,0BAEd,CACIS,KAAM,QACNT,SAAU,0BAEd,CACIS,KAAM,QACNT,SAAU,0BAEd,CACIS,KAAM,UACNT,SAAU,4BAEd,CACIS,KAAM,SACNT,SAAU,2BAEd,CACIS,KAAM,UACNT,SAAU,4BAEd,CACIS,KAAM,UACNT,SAAU,4BAEd,CACIS,KAAM,iBACNT,SAAU,mCAEd,CACIS,KAAM,SACNT,SAAU,2BAEd,CACIS,KAAM,WACNT,SAAU,6BAEd,CACIS,KAAM,cACNT,SAAU,gCAEd,CACIS,KAAM,WACNT,SAAU,6BAEd,CACIS,KAAM,UACNT,SAAU,4BAEd,CACIS,KAAM,aACNT,SAAU,+BAEd,CACIS,KAAM,UACNT,SAAU,6BAIlB,SAAS+B,EAAYD,GAEjB,IAAME,EAAoBF,EAAUG,QAChC,SAACC,EAAKC,GAAN,OAAYD,EAAIE,OAAOD,EAAEnC,YAAW,IAGlCqC,EAAkBC,YAAQN,GAAmBO,MAAM,EAAG,GAEtDhC,EAASiC,YAAOH,GAEtB,MAAO,CACH1B,MAAO0B,EAEP7B,QAASsB,EAAUW,MAAK,SAACjC,GAAD,OAAaA,EAAQR,WAAaO,MAIlE,IAAMmC,EAAQ,CACVlB,SAAUO,EAAYD,GACtBlC,SAAS,EACTS,MAAO,EACPkB,YAAa,EACboB,SAAU,EACVC,SAAS,EACT5B,UAAU,EACV6B,WAAW,GAGf,SAAS5B,EAAiBV,GACtB,IAAMuC,EAAYJ,EAAMlB,SAAShB,QAAQR,WAAaO,EAClDmC,EAAMnB,YAAc,GACpBmB,EAAMrC,OAASyC,EAAY,GAAK,EAChCJ,EAAM9C,SAAU,EAChB8C,EAAM1B,UAAW,EACjB0B,EAAMnB,aAAemB,EAAMnB,YAAc,EAAI,EAAI,EACjDwB,YAAW,WACPL,EAAMlB,SAAWO,EAAYD,GAC7BY,EAAM9C,SAAU,EAChB8C,EAAME,SAAU,EAChBF,EAAM1B,UAAW,EACjBgC,MACD,MAEHN,EAAMG,WAAY,EAEtBG,IAGJ,SAAS9B,EAAgBL,EAAMN,GAC3B,OAAOM,IAASN,EAGpB,SAASa,IACLsB,EAAM9C,SAAU,EAChB8C,EAAME,SAAU,EAChBF,EAAMnB,YAAc,EACpBmB,EAAMG,WAAY,EAClBH,EAAM1B,UAAW,EACjB0B,EAAMrC,MAAQ,EACdqC,EAAMlB,SAAWO,EAAYD,GAC7BkB,IAGJ,SAASA,IACLC,IAASD,OAAQ,kBACb,IAAME,WADO,KAEb,kBACA,EADA,iBACiBR,EADjB,CAEAzB,iBAAqBA,EACrBC,gBAAoBA,EACpBE,gBAAoBA,KANP,KASb+B,SAASC,eAAe,SAIhCJ,IDnCM,kBAAmBK,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.615ba8ec.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\n\nfunction ProgressBar(props) {\n  let widthPercent = ((props.currentQuestion - 1) / 5) * 100;\n  return (\n    <div className=\"progress progressBar\" style={{ height: \"40px\" }}>\n      <div\n        className=\"progress-bar\"\n        role=\"progressbar\"\n        style={{ width: widthPercent + \"%\" }}\n        aria-valuenow={props.widthPercent}\n        aria-valuemin={0}\n        aria-valuemax={100}\n      >\n        {widthPercent > 0 ? widthPercent + \"%\" : \"\"}\n      </div>\n    </div>\n  );\n}\nfunction Flag(props) {\n  return (\n    <div className={\"col-6 col-md-3\"}>\n      <div\n        className={`FlagContainer ${\n          props.clicked ? props.currentStatus.toString() : \"\"\n        }`}\n        onClick={() => {\n          props.onClick(props.imageUrl);\n        }}\n      >\n        <div>\n          <img\n            src={props.imageUrl}\n            alt={props.title}\n            title={props.title}\n            className={\"img-fluid\"}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\nfunction Header(props) {\n  return (\n    <div className=\"QuestionNumber\">\n      <h4 className=\" float-left\">\n        Question {props.currentQuestion > 5 ? \"5\" : props.currentQuestion}\n        <span>/5</span>\n      </h4>\n      <h4 className=\"float-right\">\n        Score: {props.score}\n        <span>/50</span>\n      </h4>\n    </div>\n  );\n}\nfunction Turn(props) {\n  const answer = props.country.imageUrl;\n  return (\n    <>\n      <h2 className={\"text-center CurrentQuestion\"}>\n        {props.country.name.toUpperCase()}\n      </h2>\n      <div className=\"container\">\n        <div className=\"row\">\n          {props.flags.map((flag, i) => (\n            <Flag\n              imageUrl={flag}\n              title={i}\n              key={i}\n              selected={props.selected}\n              clicked={props.clicked}\n              onClick={props.onAnswerSelected}\n              currentStatus={props.statusDetermine(flag, answer)}\n            />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\nfunction Continue(props) {\n  return (\n    <div className=\"text-center play-again\">\n      <button\n        onClick={() => {\n          props.resetEverything(null);\n        }}\n      >\n        Play Again\n      </button>\n    </div>\n  );\n}\nconst Results = (props) => {\n  return (\n    <h4 className=\"text-center\">\n      Your score is: <span className=\"result\">{props.score}</span>\n    </h4>\n  );\n};\nfunction GeoChallenge(props) {\n  return (\n    <div className=\"container\">\n      <ProgressBar currentQuestion={props.questionNum} />\n      <Header score={props.score} currentQuestion={props.questionNum} />\n      {props.questionNum < 6 ? (\n        <Turn\n          {...props.turnData}\n          selected={props.selected}\n          clicked={props.clicked}\n          onAnswerSelected={props.onAnswerSelected}\n          statusDetermine={props.statusDetermine}\n        />\n      ) : (\n        <>\n          <Results score={props.score} />\n          <Continue resetEverything={props.resetEverything} />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default GeoChallenge;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GeoChallenge from \"./GeoChallenge\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { shuffle, sample } from \"underscore\";\n\nconst countries = [{\n        name: \"argentina\",\n        imageUrl: \"images/flags/argentina.svg\",\n    },\n    {\n        name: \"brazil\",\n        imageUrl: \"images/flags/brazil.svg\",\n    },\n    {\n        name: \"cameroon\",\n        imageUrl: \"images/flags/cameroon.svg\",\n    },\n    {\n        name: \"canada\",\n        imageUrl: \"images/flags/canada.svg\",\n    },\n    {\n        name: \"djibouti\",\n        imageUrl: \"images/flags/djibouti.svg\",\n    },\n    {\n        name: \"egypt\",\n        imageUrl: \"images/flags/egypt.svg\",\n    },\n    {\n        name: \"ghana\",\n        imageUrl: \"images/flags/ghana.svg\",\n    },\n    {\n        name: \"india\",\n        imageUrl: \"images/flags/india.svg\",\n    },\n    {\n        name: \"denmark\",\n        imageUrl: \"images/flags/denmark.svg\",\n    },\n    {\n        name: \"malawi\",\n        imageUrl: \"images/flags/malawi.svg\",\n    },\n    {\n        name: \"morocco\",\n        imageUrl: \"images/flags/morocco.svg\",\n    },\n    {\n        name: \"myanmar\",\n        imageUrl: \"images/flags/myanmar.svg\",\n    },\n    {\n        name: \"norfolk-island\",\n        imageUrl: \"images/flags/norfolk-island.svg\",\n    },\n    {\n        name: \"panama\",\n        imageUrl: \"images/flags/panama.svg\",\n    },\n    {\n        name: \"portugal\",\n        imageUrl: \"images/flags/portugal.svg\",\n    },\n    {\n        name: \"saba-island\",\n        imageUrl: \"images/flags/saba-island.svg\",\n    },\n    {\n        name: \"scotland\",\n        imageUrl: \"images/flags/scotland.svg\",\n    },\n    {\n        name: \"senegal\",\n        imageUrl: \"images/flags/senegal.svg\",\n    },\n    {\n        name: \"seychelles\",\n        imageUrl: \"images/flags/seychelles.svg\",\n    },\n    {\n        name: \"tunisia\",\n        imageUrl: \"images/flags/tunisia.svg\",\n    },\n];\n\nfunction getTurnData(countries) {\n    // make an array of all flags url\n    const allCountriesFlags = countries.reduce(\n        (acc, x) => acc.concat(x.imageUrl), []\n    );\n    // shuffle the array and take the first 4 flags urls\n    const fourRandomFlags = shuffle(allCountriesFlags).slice(0, 4);\n    // pick one answer\n    const answer = sample(fourRandomFlags);\n\n    return {\n        flags: fourRandomFlags,\n        // check if there is a country with url == answer and return it as an object\n        country: countries.find((country) => country.imageUrl === answer),\n    };\n}\n\nconst state = {\n    turnData: getTurnData(countries),\n    clicked: false,\n    score: 0,\n    questionNum: 1,\n    progress: 0,\n    correct: false,\n    selected: false,\n    playagain: false,\n};\n\nfunction onAnswerSelected(answer) {\n    const isCorrect = state.turnData.country.imageUrl === answer;\n    if (state.questionNum < 6) {\n        state.score += isCorrect ? 10 : 0;\n        state.clicked = true;\n        state.selected = true;\n        state.questionNum += state.questionNum < 6 ? 1 : 0;\n        setTimeout(() => {\n            state.turnData = getTurnData(countries);\n            state.clicked = false;\n            state.correct = false;\n            state.selected = false;\n            render();\n        }, 500);\n    } else {\n        state.playagain = true;\n    }\n    render();\n}\n\nfunction statusDetermine(flag, answer) {\n    return flag === answer;\n}\n\nfunction resetEverything() {\n    state.clicked = false;\n    state.correct = false;\n    state.questionNum = 1;\n    state.playagain = false;\n    state.selected = false;\n    state.score = 0;\n    state.turnData = getTurnData(countries);\n    render();\n}\n\nfunction render() {\n    ReactDOM.render( <\n        React.StrictMode >\n        <\n        GeoChallenge {...state }\n        onAnswerSelected = { onAnswerSelected }\n        statusDetermine = { statusDetermine }\n        resetEverything = { resetEverything }\n        /> < /\n        React.StrictMode > ,\n        document.getElementById(\"root\")\n    );\n}\n\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}